{
	"info": {
		"_postman_id": "4d91b91b-5703-43f2-b3f1-feb128ae8eee",
		"name": "Student expert",
		"description": "Learn the skills to become a certified Postman Student Expert.\n\n__Fork__ this collection into your own workspace, send the first request and follow the instructions!",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Begin training - Requests",
			"item": [
				{
					"name": "0. Start training",
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{training-api}}/training",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"training"
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Get matches",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{training-api}}/matches?status=played",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"matches"
							],
							"query": [
								{
									"key": "status",
									"value": "played"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get matches Path Param",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{training-api}}/matches/:played",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"matches",
								":played"
							],
							"variable": [
								{
									"key": "played",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get matches Filtered",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{training-api}}/matches?status=pending&team=United",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"matches"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								},
								{
									"key": "team",
									"value": "United"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Add match",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "muralidhar.thunuguntla@gmail.com",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "match_key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"against\": \"Academical\",\r\n  \"match\": \"Cup Final\",\r\n  \"when\": \"{{$randomDateFuture}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{training-api}}/match?status=played",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"match"
							],
							"query": [
								{
									"key": "status",
									"value": "played"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Add match Copy",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "match_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{email_key}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{training-api}}/match?status=played",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"match"
							],
							"query": [
								{
									"key": "status",
									"value": "played"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Add match Copy 2",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "in",
									"value": "header",
									"type": "string"
								},
								{
									"key": "key",
									"value": "match_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{email_key}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{training-api}}/match",
							"host": [
								"{{training-api}}"
							],
							"path": [
								"match"
							],
							"query": [
								{
									"key": "status",
									"value": "played",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Scripting and Collection Runs",
			"item": [
				{
					"name": "Get all players",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(400); \r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_url}}/players",
							"host": [
								"{{mock_url}}"
							],
							"path": [
								"players"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific player",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.json().data.played<750) postman.setNextRequest('Get all players');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if(!pm.variables.get('player_id')) pm.environment.set('player_id', -1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_url}}/player?id={{player_id}}",
							"host": [
								"{{mock_url}}"
							],
							"path": [
								"player"
							],
							"query": [
								{
									"key": "id",
									"value": "{{player_id}}"
								}
							]
						},
						"description": "Get specific player by passing ID as a parameter"
					},
					"response": []
				},
				{
					"name": "Get stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Stats include all fields', function () {\r",
									"    var jsonData = pm.response.json().data;\r",
									"    pm.expect(jsonData).to.have.all.keys('won', 'lost', 'drew');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mock_url}}/stats",
							"host": [
								"{{mock_url}}"
							],
							"path": [
								"stats"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Check Progress",
			"item": [
				{
					"name": "Skill check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('SkillCheck', function () {\r",
									"    pm.environment.set('responseData', pm.response.json().rand);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "soMuch",
									"type": "string"
								},
								{
									"key": "key",
									"value": "auth_key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "user-id",
								"value": "{{userId}}",
								"type": "text",
								"description": "plz don't edit or remove this header"
							},
							{
								"key": "course",
								"value": "{{myCourse}}",
								"type": "text",
								"description": "plz don't edit or remove this header"
							},
							{
								"key": "response-value",
								"value": "{{responseData}}",
								"type": "text",
								"description": "plz don't edit or remove this header"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Muralidhar Thunuguntla\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "postman-skill-checker.glitch.me/skills?email=muralidhar.thunuguntla@gmail.com",
							"host": [
								"postman-skill-checker",
								"glitch",
								"me"
							],
							"path": [
								"skills"
							],
							"query": [
								{
									"key": "email",
									"value": "muralidhar.thunuguntla@gmail.com"
								}
							]
						},
						"description": "Hit **Send**, complete each requirement and keep sending until you get a success response!"
					},
					"response": []
				},
				{
					"name": "Test collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//auth details at collection level",
									"let authObj = pm.response.json().auth;",
									"//request array",
									"let requestArr = pm.response.json().item[0].item;",
									"//mock array ",
									"let mockArr = pm.response.json().item[1].item;",
									"//checks array",
									"let checksArr = pm.response.json().item[2].item; ",
									"",
									"//info",
									"pm.test(\"Once all of your tests are passing, save your collection, update the link via the Share flow, and submit it: bit.ly/student-expert-submission\", () =>{",
									"    pm.expect(true).to.eql(true);",
									"});",
									"",
									"//collection name is correct",
									"let nameCorrect=false;",
									"pm.test('Correct collection name', () => {",
									"    let studIndex = pm.response.json().info.name.indexOf(\"Student expert\");",
									"    let classIndex = pm.response.json().info.name.indexOf(\"Classroom\");",
									"    nameCorrect = studIndex>-1 || classIndex>-1;",
									"    pm.expect(nameCorrect).to.eql(true);",
									"});",
									"",
									"//used auth",
									"pm.test(\"Authorized requests\", () => {",
									"    pm.expect(authObj).to.be.an(\"object\");",
									"    pm.expect(authObj).to.have.property(\"apikey\"); ",
									"    console.log(authObj);",
									"});",
									"",
									"//used all required methods",
									"pm.test(\"Used GET, POST, PUT, DELETE methods\", () => {",
									"    //first folder should have all methods in requests",
									"    let methArr = requestArr.map(value => value.request.method); ",
									"    console.log(methArr);",
									"    pm.expect(methArr).to.include.members([\"GET\", \"POST\", \"PUT\", \"DELETE\"]);",
									"});",
									"",
									"//used params - query and path",
									"pm.test(\"Used query and path parameters\", () => {",
									"    //first folder should have query",
									"    let queryArr = requestArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
									"    console.log('Querys');",
									"    console.log(queryArr);",
									"    pm.expect(queryArr).to.have.length.of.above(0);",
									"    //first folder should also have path",
									"    let pathArr = requestArr.filter(value => value.request.url.path).map(value => value.request.url.path);",
									"    var pathParams = pathArr.flat().filter(p => p.startsWith(':')); ",
									"    console.log(pathParams);",
									"    console.log('Paths');",
									"    console.log(pathArr);",
									"    pm.expect(pathParams).to.have.length.of.above(0);",
									"});",
									"",
									"//sent body",
									"pm.test(\"Sent body data\", () => {",
									"    //first folder should have a body",
									"    let bodyArr = requestArr.filter(value => value.request.body).map(value => value.request.body); ",
									"    console.log(bodyArr);",
									"    pm.expect(bodyArr).to.have.length.of.above(0);",
									"});",
									"",
									"//used vars",
									"pm.test(\"Used variables\", () => {",
									"    //should be a var reference in query param for mock folder",
									"    let varsArr = mockArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
									"    let queries = varsArr.flat().filter(value => value.value).map(value => value.value);",
									"    var queryVars = queries.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
									"    console.log(queryVars);",
									"    pm.expect(queryVars).to.have.length.of.above(0);",
									"    //base path for main folder should also use var",
									"    //url is object when path or query param, string otherwise",
									"    let addresses = requestArr.filter(value => value.request.url.raw ? value.request.url.raw : value.request.url).map(value => value.request.url.raw ? value.request.url.raw : value.request.url);",
									"    var addressVars = addresses.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
									"    console.log(addressVars);",
									"    pm.expect(addressVars).to.have.length.of.above(0);",
									"    //auth should also use var",
									"    pm.expect(encodeURI(authObj.apikey.value).indexOf('%7B%7B')).to.be.above(-1);",
									"",
									"});",
									"",
									"//assed description",
									"pm.test(\"Added request description\", () => {",
									"    //second folder should have a description",
									"    let descArr = mockArr.filter(value => value.request.description).map(value => value.request.description);",
									"    console.log(descArr);",
									"    pm.expect(descArr).to.have.length.of.above(0);",
									"});",
									"",
									"//set var from script and next request - make it env var so we check that too",
									"pm.test(\"Set env variable from script and set next request\", () => {",
									"    //second folder should have set var and next req",
									"    let testsArr = mockArr.filter(value => value.event).map(value => value.event); ",
									"    console.log(testsArr);",
									"    let execArr = testsArr.flat().filter(value => value.script.exec).map(value => value.script.exec); ",
									"    var setsVars = execArr.flat().filter(p => p.indexOf('environment.set(')>-1); ",
									"    console.log(setsVars);",
									"    pm.expect(setsVars).to.have.length.of.above(0);",
									"    var setsReqs = execArr.flat().filter(p => p.indexOf('.setNextRequest')>-1); ",
									"    console.log(setsReqs);",
									"    pm.expect(setsReqs).to.have.length.of.above(0);",
									"});",
									"//add skill check test",
									"pm.test('Skills checked', () =>{",
									"    var vars = pm.response.json().variable.map(value => value.key);",
									"    pm.expect(vars).to.include('skilled');",
									"});",
									"//check pulled response property",
									"pm.test('Skill check code retrieving set var value from response property', () => {",
									"    //need to make sure set var from response json in skill check request - third folder",
									"        //need to make sure set var from response json in skill check request - third folder",
									"    let scr = JSON.stringify(checksArr[0].event[0].script);",
									"    let resParse = scr.indexOf('pm.response.json')>-1 || scr.indexOf('.rand')>-1;",
									"    pm.expect(resParse).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.getpostman.com/collections/5b22a2cf532b1e1a5cb7",
							"protocol": "https",
							"host": [
								"www",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"5b22a2cf532b1e1a5cb7"
							]
						},
						"description": "Paste your collection public link in as the address and send, checking the test results to see if you completed this step."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var uID = pm.collectionVariables.get(\"userId\");",
							"if(!uID)",
							"    pm.collectionVariables.set(\"userId\", pm.variables.replaceIn('{{$guid}}'));",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var template = `",
							"<!--showdown for converting md to html-->",
							"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js\"></script>",
							"    <script type=\"text/javascript\">",
							"        function getContent(orig){",
							"            var converter = new showdown.Converter(), text = orig, html = converter.makeHtml(text);",
							"            return html;",
							"        }",
							"    </script>",
							"<h1>{{response.title}}</h1>",
							"<p>",
							"<script type=\"text/javascript\">",
							"    document.write(getContent(\"{{response.intro}}\"));",
							"</script>",
							"</p>",
							"<div id='skills'></div>",
							"<script type=\"text/javascript\">",
							"pm.getData(function(error, data) {",
							"    let skills=data.response.skills; let i; let skillList=\"\"; console.log(skills.length)",
							"    for(i=0; i<skills.length; i++){",
							"        let done = skills[i].value ? \"&#9989;\" : \"&#10060;\"",
							"        skillList+=\"<strong>\"+skills[i].name+\"</strong> \"+done+\"<br/>\"+skills[i].hint+\"<br/>\";",
							"    }",
							"    document.getElementById('skills').innerHTML=skillList;",
							"});",
							"</script>",
							"`;",
							"",
							"// Set visualizer",
							"pm.visualizer.set(template, {",
							"    // Pass the response body parsed as JSON as `data`",
							"    response: pm.response.json()",
							"});",
							"",
							"if(pm.response.json().done) pm.collectionVariables.set('skilled', true);"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{email_key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "match_key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var template = `",
					"    <!--showdown for converting md to html-->",
					"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js\"></script>",
					"    <script type=\"text/javascript\">",
					"        function getContent(orig){",
					"            var converter = new showdown.Converter(), text = orig, html = converter.makeHtml(text);",
					"            return html;",
					"        }",
					"    </script>",
					"    ",
					"    <!--syntax highlighting-->",
					"    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/default.min.css\">",
					"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js\"></script>",
					"    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/googlecode.min.css\">",
					"    ",
					"    <!--generic styles-->",
					"    <style type=\"text/css\">",
					"    #notes p, #next p {padding-left:20px; border-left:2px solid #333333; }",
					"    #notes, #next {padding-right:20px;}",
					"    img {max-width:600px; padding-left:20px; padding-bottom:20px;}",
					"    </style>",
					"",
					"    <h2 style=\"color: {{status}}\">{{response.tutorial.title}}</h2>",
					"    ",
					"    <div id=\"intro\"></div>",
					"",
					"    <div id=\"notes\"></div>",
					"    ",
					"    {{#if response.tutorial.next}}",
					"    <h3>Next</h3>",
					"    <div id=\"next\"></div>",
					"    {{/if}}",
					"    ",
					"    <script type=\"text/javascript\">",
					"        if(\"{{response.tutorial.rip}}\".length>0)",
					"            document.write(getContent(\"{{response.tutorial.rip}}\"));",
					"    </script>",
					"    ",
					"    <script type=\"text/javascript\">",
					"        if(\"{{response.tutorial.pic}}\".length>0)",
					"            document.write(\"<img src='{{response.tutorial.pic}}' alt='postman steps'/>\");",
					"    </script>",
					"",
					"    <!--content to process before rendering-->",
					"    <script type=\"text/javascript\">",
					"        pm.getData(function(error, data) {",
					"            var tut = data.response.tutorial;",
					"            if(tut){",
					"                if(tut.steps){",
					"                    var i; ",
					"                    var infoArray = tut.steps;",
					"                    var notes=\"<div id='notes'>\";",
					"                    for(i=0; i<infoArray.length; i++){",
					"                        notes+=getContent(infoArray[i].note);",
					"                        if(infoArray[i].raw_data){",
					"                            notes+=\"<pre style='padding-left:20px'><code class='json'>\"+JSON.stringify(infoArray[i].raw_data, null, 2)+\"</code></pre>\";",
					"                        }",
					"                        if(infoArray[i].js_code){",
					"                            var c;",
					"                            notes+=\"<pre style='padding-left:20px'><code class='js'>\";",
					"                            for(c=0; c<infoArray[i].js_code.length; c++)",
					"                                notes+=infoArray[i].js_code[c]+\"<br/>\";",
					"                            notes+=\"</code></pre>\";",
					"                        }",
					"                        if(infoArray[i].ref_data){",
					"                            notes+=\"<pre style='padding-left:20px'><code class='json'>\"+JSON.stringify(data.response[infoArray[i].ref_data], null, 2)+\"</code></pre>\";",
					"                        }",
					"                        if(infoArray[i].pic)",
					"                            notes+=\"<img src='\"+infoArray[i].pic+\"' alt='postman steps'/>\";",
					"                    }",
					"                    notes+=\"</div>\"",
					"                    document.getElementById(\"notes\").innerHTML=notes;",
					"                }",
					"                document.getElementById(\"intro\").innerHTML=getContent(tut.intro);",
					"                if(tut.next){",
					"                    var nextDiv=document.getElementById(\"next\");",
					"                    var n;",
					"                    var nextContent=\"\";",
					"                    var nextArray=tut.next;",
					"                    for(n=0; n<nextArray.length; n++){",
					"                        nextContent+=getContent(nextArray[n].step);",
					"                        if(nextArray[n].raw_data){",
					"                            nextContent+=\"<pre style='padding-left:20px'><code class='json'>\"+JSON.    stringify(nextArray[n].raw_data, null, 2)+\"</code></pre>\";",
					"                        }",
					"                        if(nextArray[n].js_code){",
					"                            var c;",
					"                            nextContent+=\"<pre style='padding-left:20px'><code class='js'>\";",
					"                            for(c=0; c<nextArray[n].js_code.length; c++)",
					"                                nextContent+=nextArray[n].js_code[c];",
					"                            nextContent+=\"</code></pre>\";",
					"                        }",
					"                        if(nextArray[n].pic)",
					"                            nextContent+=\"<img src='\"+nextArray[n].pic+\"' alt='postman steps'/>\";",
					"                    }",
					"                    nextDiv.innerHTML=getContent(nextContent);",
					"                }",
					"            }",
					"            hljs.initHighlighting();",
					"        });",
					"    </script>",
					"`;",
					"if (pm.response.headers.get(\"Content-Type\").includes(\"json\")) {",
					"  pm.visualizer.set(template, {",
					"    response: pm.response.json(),",
					"    status: (\"\" + pm.response.code).startsWith(\"4\") ? \"#cc0000\" : \"#000000\"",
					"  });",
					"} else if (pm.response.headers.get(\"Content-Type\").includes(\"html\")) {",
					"  pm.visualizer.set(`{{info}}`, {",
					"    info:",
					"      \"Hmm this seems to be HTML and not JSON - you might have hit an invalid endpoint - undo your changes, or close the request without saving and try opening / sending it again!\"",
					"  });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "mock_url",
			"value": "https://d78ddda7-4a57-40b3-badf-fa500035e260.mock.pstmn.io"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "training_api",
			"value": "postman-student-expert.glitch.me"
		},
		{
			"key": "training-api",
			"value": "postman-student-expert.glitch.me"
		},
		{
			"key": "email_key",
			"value": "muralidhar.thunuguntla@gmail.com"
		},
		{
			"key": "myCourse",
			"value": ""
		},
		{
			"key": "skilled",
			"value": ""
		}
	]
}